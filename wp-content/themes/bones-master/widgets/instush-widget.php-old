<?php
/*
Plugin Name: Better Starter Widget for WordPress developers
Plugin URI: 
Description: Effortlessly create WordPress widgets with this template!
Version: 1.0
Author: khromov
Author URI: http://snippets.khromov.se
License: GPL2
*/

/**
 * Register the widget
 */
add_action('widgets_init', create_function('', 'return register_widget("Widget_Better_Starter_Widget");'));

/**
 * Class Widget_Better_Starter_Widget
 */
class Widget_Better_Starter_Widget extends WP_Widget
{
	/** Basic Widget Settings */
	const WIDGET_NAME = "Better Starter Widget";
	const WIDGET_DESCRIPTION = "This is the description";

	var $textdomain;
	var $fields;

	/**
	 * Construct the widget
	 */
	function __construct()
	{
		//We're going to use $this->textdomain as both the translation domain and the widget class name and ID
		$this->textdomain = strtolower(get_class($this));

		//Figure out your textdomain for translations via this handy debug print
		//var_dump($this->textdomain);

		//Add fields
		$this->add_field('title', 'Enter title', '', 'text');
		$this->add_field('example_field', 'Example field', 'This is the default value', 'text');
		$this->add_field('example_field', 'Example field', 'This is the default value', 'text');

		//Translations
		load_plugin_textdomain($this->textdomain, false, basename(dirname(__FILE__)) . '/languages' );

		//Init the widget
		parent::__construct($this->textdomain, __(self::WIDGET_NAME, $this->textdomain), array( 'description' => __(self::WIDGET_DESCRIPTION, $this->textdomain), 'classname' => $this->textdomain));
    
 
		// Add Scripts and Stylesheets
   if ( is_active_widget( false, false, $this->id_base, true ) )  
       {
            // Enqueue the JS and styles for the backend.    
          add_action('wp_enqueue_scripts', 'instush_scripts');
          function instush_scripts() {
            wp_register_script( 'insta-js', get_stylesheet_directory_uri() . '/library/js/instagramLite.js', array( 'jquery' ), '', true );   
            wp_enqueue_script('insta-js');
          }

       }
    
    
	}

	/**
	 * Widget frontend
	 *
	 * @param array $args
	 * @param array $instance
	 */
	public function widget($args, $instance)
	{
		$title = apply_filters('widget_title', $instance['title']);

		/* Before and after widget arguments are usually modified by themes */
		echo $args['before_widget'];

		if (!empty($title))
			echo $args['before_title'] . $title . $args['after_title'];

		/* Widget output here */
		$this->widget_output($args, $instance);

		/* After widget */
		echo $args['after_widget'];
	}
	
	/**
	 * This function will execute the widget frontend logic.
	 * Everything you want in the widget should be output here.
	 */
	private function widget_output($args, $instance)
	{
		extract($instance);

		/**
		 * This is where you write your custom code.
		 */
		?>
			<p>
				Here is the widget <?php echo $title; ?> <br/>
				And here is our example field: <?php echo $example_field; ?>
				<!-- The variable above can also be reached via $instance['example_field']; -->
			</p>


        <div class="wrap-instush">
          <!--<h3 class="center caps">Instagram feed Gallery</h3>  -->
          <ul class="instush-list instush_<?php echo $this->id; ?>"></ul> 
          <div class="load-more clearfix center">  
            <button class="more-<?php echo $this->id; ?> load-more-btn btn btn-outline center caps"><span>load more</span></button>   
          </div> 
        </div>  
        <script>
        jQuery( document ).ready(function() {  
          jQuery('.instush_<?php echo $this->id; ?>').instagramLite({
              clientID: '<?php echo get_option('instush_client_id'); ?>',
              username: '<?php echo get_option('instush_username'); ?>',
              limit: <?php echo get_option('instush_num_items'); ?>,
              urls: true,
              videos: false, 
              captions: false,
              likes: true,
              comments_count: true,
              load_more: ".more-<?php echo $this->id; ?>"
          });
        });  


        jQuery(document).ready(function(){
          jQuery('.more-<?php echo $this->id; ?>').on('click', loadBar)

          function loadBar(){
            jQuery('.more-<?php echo $this->id; ?>').contents().after('<span class="loading-bar gradient-animate px1"><i class="fa fa-spinner fa-spin"></i> </span>')
            setTimeout(function(){
              jQuery('.loading-bar').remove();
            }, 800);
          }

        });  
        </script>
		<?php
	}

	/**
	 * Widget backend
	 *
	 * @param array $instance
	 * @return string|void
	 */
	public function form( $instance )
	{
		/* Generate admin for fields */
		foreach($this->fields as $field_name => $field_data)
		{
			if($field_data['type'] === 'text'):
				?>
				<p>
					<label for="<?php echo $this->get_field_id($field_name); ?>"><?php _e($field_data['description'], $this->textdomain ); ?></label>
					<input class="widefat" id="<?php echo $this->get_field_id($field_name); ?>" name="<?php echo $this->get_field_name($field_name); ?>" type="text" value="<?php echo esc_attr(isset($instance[$field_name]) ? $instance[$field_name] : $field_data['default_value']); ?>" />
				</p>
			<?php
			//elseif($field_data['type'] == 'textarea'):
			//You can implement more field types like this.
			else:
				echo __('Error - Field type not supported', $this->textdomain) . ': ' . $field_data['type'];
			endif;
		}
	}

	/**
	 * Adds a text field to the widget
	 *
	 * @param $field_name
	 * @param string $field_description
	 * @param string $field_default_value
	 * @param string $field_type
	 */
	private function add_field($field_name, $field_description = '', $field_default_value = '', $field_type = 'text')
	{
		if(!is_array($this->fields))
			$this->fields = array();

		$this->fields[$field_name] = array('name' => $field_name, 'description' => $field_description, 'default_value' => $field_default_value, 'type' => $field_type);
	}

	/**
	 * Updating widget by replacing the old instance with new
	 *
	 * @param array $new_instance
	 * @param array $old_instance
	 * @return array
	 */
	public function update($new_instance, $old_instance)
	{
		return $new_instance;
	}
}